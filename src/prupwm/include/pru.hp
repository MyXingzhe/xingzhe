// Copyright (c) 2013 Owen McAree
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// pru.hp
#ifndef __PRU_HP__
#define __PRU_HP__

// Definitions

// Refer to this mapping in the file - pruss_intc_mapping.h
#define PRU0_PRU1_INTERRUPT     17
#define PRU1_PRU0_INTERRUPT     18
#define PRU0_ARM_INTERRUPT      19
#define PRU1_ARM_INTERRUPT      20
#define ARM_PRU0_INTERRUPT      21
#define ARM_PRU1_INTERRUPT      22

#define CONST_PRUCFG         C4
#define CONST_PRUDRAM        C24
#define CONST_PRUSHAREDRAM   C28
#define CONST_DDR            C31

// offsets
#define GPIO_OE 0x134
#define GPIO_DATAIN 0x138
#define GPIO_RISINGDETECT 0x148
#define GPIO_FALLINGDETECT 0x14c
#define GPIO_SETDATAOUT 0x190
#define GPIO_CLEARDATAOUT 0x194

// Power, reset, and clock management (PRCM)
#define CM_PER 0x44e00000  // Clock module for peripherals
#define CM_DPLL 0x44e00500 // Clock module for phase-locked loops
#define CONTROL_MODULE 0x44e10000 // Control module (AM335x Tech Ref sec. 9)

//offsets
#define CM_PER_L4LS_CLKSTCTRL 0x00  // L4 clock state control register?
#define CM_PER_TIMER2_CLKCTRL 0x80  // timer activity registers...
#define CM_PER_TIMER3_CLKCTRL 0x84
#define CM_PER_TIMER4_CLKCTRL 0x88
#define CM_PER_TIMER5_CLKCTRL 0xec
#define CM_PER_TIMER6_CLKCTRL 0xf0
#define CM_PER_TIMER7_CLKCTRL 0x7c

#define CLKSEL_TIMER2_CLK 0x08  // timer clock source registers...
#define CLKSEL_TIMER3_CLK 0x0c
#define CLKSEL_TIMER4_CLK 0x10
#define CLKSEL_TIMER5_CLK 0x18
#define CLKSEL_TIMER6_CLK 0x1c
#define CLKSEL_TIMER7_CLK 0x04

#define CONTROL_STATUS 0x40  // contains clock freq info
#define TIMER_EVT_CAPT 0xfd0  // events captured by timers

// events  (from sec. 9.2.4.4.5 of ARM 335x Technical Reference)
#define EVENT_GPIO0_1 17
#define EVENT_GPIO0_2 18
#define EVENT_GPIO1_1 19
#define EVENT_GPIO1_2 20
#define EVENT_GPIO2_1 21
#define EVENT_GPIO2_2 22
#define EVENT_GPIO3_1 23
#define EVENT_GPIO3_2 24


// Timers
#define DMTIMER0 0x44e05000
#define DMTIMER1_1MS 0x44e31000
#define DMTIMER2 0x48040000
#define DMTIMER3 0x48042000
#define DMTIMER4 0x48044000
#define DMTIMER5 0x48046000
#define DMTIMER6 0x48048000
#define DMTIMER7 0x4804a000

// offsets  (from sec. 20.1.5 of ARM 335x Technical Reference)
#define TIDR 0x00           // timer identification register
#define TIOCP_CFG 0x10      // timer OCP config register
#define IRQ_EOI 0x20        // timer IRQ end-of-interrupt register
#define IRQSTATUS_RAW 0x24  // timer status raw register
#define IRQSTATUS 0x28      // timer status register
#define IRQENABLE_SET 0x2c  // timer interrupt enable set register
#define IRQENABLE_CLR 0x30  // timer interrupt enable clear register
#define IRQWAKEEN 0x34      // timer IRQ wake-up enable register
#define TCLR 0x38           // timer control register
#define TCRR 0x3c           // timer counter register
#define TLDR 0x40           // timer load register
#define TTGR 0x44           // timer trigger register
#define TWPS 0x48           // timer write posting bits register
#define TMAR 0x4c           // timer match register
#define TCAR1 0x50          // timer capture register, event 1
#define TSICR 0x54          // timer synchronous interface control register
#define TCAR2 0x58 // timer capture register, event 2


// Interrupts

// To signal the host that we're done, we set bit 5 in our R31
// simultaneously with putting the number of the signal we want
// into R31 bits 0-3. See 5.2.2.2 in AM335x PRU-ICSS Reference Guide.
#define PRU_R31_VEC_VALID (1<<5)
#define PRU_EVTOUT_0_CODE 3
#define PRU_EVTOUT_1_CODE 4


// IEP 
#define IEP_GLOBAL_CFG		0
#define IEP_GLOBAL_STATUS	4
#define IEP_COMPEN			8
#define IEP_COUNT			12
#define IEP_CMP_CFG			16
#define IEP_CMP0_REG		20
#define IEP_CMP1_REG		24
#define IEP_CMP2_REG		28
#define IEP_CMP3_REG		32
#define IEP_CMP4_REG		36
#define IEP_CMP5_REG		40
#define IEP_CMP6_REG		44
#define IEP_CMP7_REG		48



// PRU CFG (configuration)
// Access the CFG block through register C4.

// offsets
#define SYSCFG 0x04       // system configuration register


// PRU Control  (sec 4.5 of AM335x Technical Reference)
#define PRU_ICSS_PRU0_CTRL 0x00022000
#define PRU_ICSS_PRU1_CTRL 0x00024000
#define COUNTER_ENABLE_BIT 3
// You really don't need the above two constants on the PRU: the base address
// of the control registers for the currently running PRU is in register C4.

#define PRUSS_CYCLE		0x2200c
// offsets
#define CTBIR0 0x20 // constants table block index register 0

// Address for the Constant table Block Index Register (CTBIR)
#define CTBIR          0x22020

// Address for the Constant table Programmable Pointer Register 0(CTPPR_0)
#define CTPPR_0         0x22028

// Address for the Constant table Programmable Pointer Register 1(CTPPR_1)
#define CTPPR_1         0x2202C

// Macros

.macro  LD32
.mparam dst,src
    LBBO    dst,src,#0x00,4
.endm

.macro  LD16
.mparam dst,src
    LBBO    dst,src,#0x00,2
.endm

.macro  LD8
.mparam dst,src
    LBBO    dst,src,#0x00,1
.endm

.macro ST32
.mparam src,dst
    SBBO    src,dst,#0x00,4
.endm

.macro ST16
.mparam src,dst
    SBBO    src,dst,#0x00,2
.endm

.macro ST8
.mparam src,dst
    SBBO    src,dst,#0x00,1
.endm

// ***************************************
// *    Global Structure Definitions     *
// ***************************************

.struct Global
    .u32 regPointer
    .u32 regVal
.ends


// ***************************************
// *     Global Register Assignments     *
// ***************************************

.assign Global, r2, *, global

#endif // __PRU_HP__



